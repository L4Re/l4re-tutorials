-- vim:set ft=lua:

local L4 = require("L4");
local l = L4.default_loader;

-- Start console multiplexer. Output is bound to standard kernel console.
local cons = l:new_channel();
l:start({ caps = { cons = cons:svr(); },
          log = L4.Env.log
        },
        "rom/cons -a");

-- Configure loader to use console multiplexer for new applications.
l.log_fab = cons;

-- Start virtual network switch. Ports are allocated on demand through the
-- switch factory capability.
local switch = l:new_channel();
l:start({ caps = { svr = switch:svr() },
          log = { "switch", "Blue" },
        },
        "rom/l4vio_switch -m");

-- Utility function to start a VM with a network port
function start_vm(num, port)
  local flags = L4.Mem_alloc_flags.Continuous
                | L4.Mem_alloc_flags.Pinned
                | L4.Mem_alloc_flags.Super_pages;
  local align = 21;
  local serialdev = { arm = "ttyAMA0", arm64 = "ttyAMA0", amd64 = "ttyS0",
                      riscv = "ttyS0" };

  l:startv({ caps = {
               ram = L4.Env.user_factory:create(L4.Proto.Dataspace,
                                                128 * 1024 * 1024,
                                                flags, align):m("rw"),
               net = port,
             },
             log = { "vm-" .. num, "", "key=" .. num },
           },
           "rom/uvmm", "-v",
              "-krom/linux",
              "-rrom/ramdisk.cpio.gz",
              "-drom/virt.dtb",
              "-cconsole=" .. serialdev[L4.Info.arch()] .. " rw swiotlb=1");
end

start_vm(1, switch:create(0))
start_vm(2, switch:create(0))
